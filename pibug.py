# -*- coding: utf-8 -*-
"""PiBug.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14cJCC5XT6NBEQQztTxtQ5nQKBXk7w5--
"""

from google.colab import files
files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d gpiosenka/100-bird-species

import os
os.mkdir("data")

from zipfile import ZipFile
file_name = "100-bird-species.zip"
with ZipFile(file_name,"r") as zip:
  zip.extractall('/content/data/')
  print("done")

test_dir="/content/datasets/test"
train_dir="/content/datasets/train"

import glob
training_list=list(glob.glob("/content/data/train/*/*.jpg"))

len(training_list)

import tqdm.notebook as tq
from tqdm.auto import tqdm
import cv2

training_data=[]
for i in range(1,len(training_list[:40])+1):
        img_array = cv2.imread(training_list[i] ,0) 
        new_array = cv2.cvtColor(img_array, cv2.COLOR_BGR2RGB) 
        training_data.append(new_array)

a=training_data[0]

b=image1

a == b

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
image21 = cv2.imread(training_list[0] ,0) 
image1 = cv2.cvtColor(image21, cv2.COLOR_BGR2RGB)
plt.imshow(image1)

import numpy as np

training_data=np.array(training_data).reshape(-1,224,224,3)

training_data.shape[1:]

# Commented out IPython magic to ensure Python compatibility.
import os
import random
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import cv2
from tqdm import tqdm
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, precision_score, accuracy_score,recall_score, f1_score,roc_auc_score,roc_curve
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D
from keras.layers.normalization import BatchNormalization
from keras.callbacks import ModelCheckpoint
# %matplotlib inline

model = Sequential()

model.add(Conv2D(64,kernel_size=(3, 3), input_shape=training_data.shape[1:], activation='relu'))
model.add(MaxPool2D(pool_size = (2, 2)))


model.add(Conv2D(32, (3, 3), activation='relu'))
model.add(MaxPool2D(pool_size=(2, 2)))
model.add(Dropout(0.4))

model.add(Flatten())
model.add(BatchNormalization())

model.add(Dense(128, activation='relu'))
model.add(Dense(30, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])





model.summary()

training_data.ndim

model.fit(x=training_data,epochs=10,validation_split=0.1)

model = Sequential()

model.add(Convolution2D(32, (3, 3), input_shape=training_data.shape[1:]))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Convolution2D(32, (3, 3), input_shape=training_data.shape[1:]))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Convolution2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Convolution2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Convolution2D(128, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))


model.add(Flatten())
model.add(Dense(128))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(225))
model.add(Activation('sigmoid'))

model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

train_dir="/content/data"
# val_dir="/content/data/valid"
# test_dir="/content/data/test"
img_width=100
img_height=100
batch_size=10



datagen = ImageDataGenerator(rescale=1. / 255)

train_generator = datagen.flow_from_directory(
    train_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary')

# val_generator = datagen.flow_from_directory(
#     val_dir,
#     target_size=(img_width, img_height),
#     batch_size=batch_size,
#     class_mode='binary')

# test_generator = datagen.flow_from_directory(
#     test_dir,
#     target_size=(img_width, img_height),
#     batch_size=batch_size,
#     class_mode='binary')

